
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e4  080048e4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  2000000c  080048f8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  080048f8  00006620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010022  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  00016057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000186e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  000193b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209f8  00000000  00000000  00019d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdf7  00000000  00000000  0003a787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7a21  00000000  00000000  0004a57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111f9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  00111fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001157b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048a4 	.word	0x080048a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048a4 	.word	0x080048a4

080001c8 <__aeabi_fmul>:
 80001c8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80001d0:	bf1e      	ittt	ne
 80001d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80001d6:	ea92 0f0c 	teqne	r2, ip
 80001da:	ea93 0f0c 	teqne	r3, ip
 80001de:	d06f      	beq.n	80002c0 <__aeabi_fmul+0xf8>
 80001e0:	441a      	add	r2, r3
 80001e2:	ea80 0c01 	eor.w	ip, r0, r1
 80001e6:	0240      	lsls	r0, r0, #9
 80001e8:	bf18      	it	ne
 80001ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001ee:	d01e      	beq.n	800022e <__aeabi_fmul+0x66>
 80001f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000200:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000204:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000208:	bf3e      	ittt	cc
 800020a:	0049      	lslcc	r1, r1, #1
 800020c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000210:	005b      	lslcc	r3, r3, #1
 8000212:	ea40 0001 	orr.w	r0, r0, r1
 8000216:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800021a:	2afd      	cmp	r2, #253	@ 0xfd
 800021c:	d81d      	bhi.n	800025a <__aeabi_fmul+0x92>
 800021e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	4770      	bx	lr
 800022e:	f090 0f00 	teq	r0, #0
 8000232:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000236:	bf08      	it	eq
 8000238:	0249      	lsleq	r1, r1, #9
 800023a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800023e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000242:	3a7f      	subs	r2, #127	@ 0x7f
 8000244:	bfc2      	ittt	gt
 8000246:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800024a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800024e:	4770      	bxgt	lr
 8000250:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000254:	f04f 0300 	mov.w	r3, #0
 8000258:	3a01      	subs	r2, #1
 800025a:	dc5d      	bgt.n	8000318 <__aeabi_fmul+0x150>
 800025c:	f112 0f19 	cmn.w	r2, #25
 8000260:	bfdc      	itt	le
 8000262:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000266:	4770      	bxle	lr
 8000268:	f1c2 0200 	rsb	r2, r2, #0
 800026c:	0041      	lsls	r1, r0, #1
 800026e:	fa21 f102 	lsr.w	r1, r1, r2
 8000272:	f1c2 0220 	rsb	r2, r2, #32
 8000276:	fa00 fc02 	lsl.w	ip, r0, r2
 800027a:	ea5f 0031 	movs.w	r0, r1, rrx
 800027e:	f140 0000 	adc.w	r0, r0, #0
 8000282:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000286:	bf08      	it	eq
 8000288:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800028c:	4770      	bx	lr
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000296:	bf02      	ittt	eq
 8000298:	0040      	lsleq	r0, r0, #1
 800029a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800029e:	3a01      	subeq	r2, #1
 80002a0:	d0f9      	beq.n	8000296 <__aeabi_fmul+0xce>
 80002a2:	ea40 000c 	orr.w	r0, r0, ip
 80002a6:	f093 0f00 	teq	r3, #0
 80002aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80002ae:	bf02      	ittt	eq
 80002b0:	0049      	lsleq	r1, r1, #1
 80002b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80002b6:	3b01      	subeq	r3, #1
 80002b8:	d0f9      	beq.n	80002ae <__aeabi_fmul+0xe6>
 80002ba:	ea41 010c 	orr.w	r1, r1, ip
 80002be:	e78f      	b.n	80001e0 <__aeabi_fmul+0x18>
 80002c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	bf18      	it	ne
 80002ca:	ea93 0f0c 	teqne	r3, ip
 80002ce:	d00a      	beq.n	80002e6 <__aeabi_fmul+0x11e>
 80002d0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80002d4:	bf18      	it	ne
 80002d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80002da:	d1d8      	bne.n	800028e <__aeabi_fmul+0xc6>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	4770      	bx	lr
 80002e6:	f090 0f00 	teq	r0, #0
 80002ea:	bf17      	itett	ne
 80002ec:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002f0:	4608      	moveq	r0, r1
 80002f2:	f091 0f00 	teqne	r1, #0
 80002f6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002fa:	d014      	beq.n	8000326 <__aeabi_fmul+0x15e>
 80002fc:	ea92 0f0c 	teq	r2, ip
 8000300:	d101      	bne.n	8000306 <__aeabi_fmul+0x13e>
 8000302:	0242      	lsls	r2, r0, #9
 8000304:	d10f      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000306:	ea93 0f0c 	teq	r3, ip
 800030a:	d103      	bne.n	8000314 <__aeabi_fmul+0x14c>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	bf18      	it	ne
 8000310:	4608      	movne	r0, r1
 8000312:	d108      	bne.n	8000326 <__aeabi_fmul+0x15e>
 8000314:	ea80 0001 	eor.w	r0, r0, r1
 8000318:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800031c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000320:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000324:	4770      	bx	lr
 8000326:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800032a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd0:	f000 b968 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	fb07 1114 	mls	r1, r7, r4, r1
 8000d26:	fa1f f68c 	uxth.w	r6, ip
 8000d2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d42:	f080 8110 	bcs.w	8000f66 <__udivmoddi4+0x27a>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810d 	bls.w	8000f66 <__udivmoddi4+0x27a>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	fb00 f606 	mul.w	r6, r0, r6
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d72:	f080 80fa 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f7 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	2100      	movs	r1, #0
 8000d82:	1b9b      	subs	r3, r3, r6
 8000d84:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80ee 	bcc.w	8000f94 <__udivmoddi4+0x2a8>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 808f 	bne.w	8000eee <__udivmoddi4+0x202>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dda:	fa1f f78c 	uxth.w	r7, ip
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	fb07 f006 	mul.w	r0, r7, r6
 8000dea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cb 	bhi.w	8000f9c <__udivmoddi4+0x2b0>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	fb00 f707 	mul.w	r7, r0, r7
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80ae 	bhi.w	8000f8e <__udivmoddi4+0x2a2>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0720 	rsb	r7, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4a:	fa24 f607 	lsr.w	r6, r4, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fbb6 f8f9 	udiv	r8, r6, r9
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	fb09 6618 	mls	r6, r9, r8, r6
 8000e5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e62:	408c      	lsls	r4, r1
 8000e64:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	431c      	orrs	r4, r3
 8000e6e:	0c23      	lsrs	r3, r4, #16
 8000e70:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e74:	4298      	cmp	r0, r3
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e80:	f108 36ff 	add.w	r6, r8, #4294967295
 8000e84:	f080 8081 	bcs.w	8000f8a <__udivmoddi4+0x29e>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	d97e      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000e8c:	f1a8 0802 	sub.w	r8, r8, #2
 8000e90:	4463      	add	r3, ip
 8000e92:	1a1e      	subs	r6, r3, r0
 8000e94:	fbb6 f3f9 	udiv	r3, r6, r9
 8000e98:	fb09 6613 	mls	r6, r9, r3, r6
 8000e9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea0:	b2a4      	uxth	r4, r4
 8000ea2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x1d0>
 8000eaa:	eb1c 0404 	adds.w	r4, ip, r4
 8000eae:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb2:	d266      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d964      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4464      	add	r4, ip
 8000ebc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ec0:	fba0 8302 	umull	r8, r3, r0, r2
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	429c      	cmp	r4, r3
 8000eca:	46c6      	mov	lr, r8
 8000ecc:	461e      	mov	r6, r3
 8000ece:	d350      	bcc.n	8000f72 <__udivmoddi4+0x286>
 8000ed0:	d04d      	beq.n	8000f6e <__udivmoddi4+0x282>
 8000ed2:	b155      	cbz	r5, 8000eea <__udivmoddi4+0x1fe>
 8000ed4:	ebba 030e 	subs.w	r3, sl, lr
 8000ed8:	eb64 0406 	sbc.w	r4, r4, r6
 8000edc:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee0:	40cb      	lsrs	r3, r1
 8000ee2:	431f      	orrs	r7, r3
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	e9c5 7400 	strd	r7, r4, [r5]
 8000eea:	2100      	movs	r1, #0
 8000eec:	e751      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000eee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d9      	lsrs	r1, r3
 8000ef8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000efc:	fa20 f303 	lsr.w	r3, r0, r3
 8000f00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f04:	fbb1 f0f8 	udiv	r0, r1, r8
 8000f08:	fb08 1110 	mls	r1, r8, r0, r1
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x248>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3a:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3e:	b2a4      	uxth	r4, r4
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x272>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x292>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x292>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e73b      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f2      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e708      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f6e:	45c2      	cmp	sl, r8
 8000f70:	d2af      	bcs.n	8000ed2 <__udivmoddi4+0x1e6>
 8000f72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f76:	eb63 060c 	sbc.w	r6, r3, ip
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a9      	b.n	8000ed2 <__udivmoddi4+0x1e6>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x272>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e79a      	b.n	8000ebc <__udivmoddi4+0x1d0>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x248>
 8000f8a:	46b0      	mov	r8, r6
 8000f8c:	e781      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74f      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e711      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e732      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fc90 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f874 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f9ca 	bl	800134c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f000 f9a8 	bl	800130c <MX_DMA_Init>
 // MX_ETH_Init();
  MX_USART3_UART_Init();
 8000fbc:	f000 f952 	bl	8001264 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fc0:	f000 f97a 	bl	80012b8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000fc4:	f000 f8b2 	bl	800112c <MX_ADC1_Init>
  MX_DAC_Init();
 8000fc8:	f000 f922 	bl	8001210 <MX_DAC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  var = val*4096/3.3;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <main+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f8f7 	bl	80001c8 <__aeabi_fmul>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_f2d>
 8000fe2:	a325      	add	r3, pc, #148	@ (adr r3, 8001078 <main+0xd0>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff fc88 	bl	80008fc <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fdf2 	bl	8000bdc <__aeabi_d2uiz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b23      	ldr	r3, [pc, #140]	@ (800108c <main+0xe4>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	  val+=0.1;
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <main+0xe0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff faf7 	bl	80005f8 <__aeabi_f2d>
 800100a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001080 <main+0xd8>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f994 	bl	800033c <__adddf3>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fdfe 	bl	8000c1c <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4a19      	ldr	r2, [pc, #100]	@ (8001088 <main+0xe0>)
 8001024:	6013      	str	r3, [r2, #0]
	  if (val >3.3)
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <main+0xe0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fae4 	bl	80005f8 <__aeabi_f2d>
 8001030:	a311      	add	r3, pc, #68	@ (adr r3, 8001078 <main+0xd0>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fdc7 	bl	8000bc8 <__aeabi_dcmpgt>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <main+0xa0>
	  {
		  val =0;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <main+0xe0>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	  }
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, var);
 8001048:	4b10      	ldr	r3, [pc, #64]	@ (800108c <main+0xe4>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <main+0xe8>)
 8001052:	f001 fc04 	bl	800285e <HAL_DAC_SetValue>
	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	480d      	ldr	r0, [pc, #52]	@ (8001090 <main+0xe8>)
 800105a:	f001 fb54 	bl	8002706 <HAL_DAC_Start>
	  HAL_ADC_Start_DMA(&hadc1, a, 3);
 800105e:	2203      	movs	r2, #3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <main+0xec>)
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <main+0xf0>)
 8001064:	f000 fe1a 	bl	8001c9c <HAL_ADC_Start_DMA>
	  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106c:	f000 fc9e 	bl	80019ac <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <main+0xf0>)
 8001072:	f000 fef1 	bl	8001e58 <HAL_ADC_Stop_DMA>
	  var = val*4096/3.3;
 8001076:	e7a9      	b.n	8000fcc <main+0x24>
 8001078:	66666666 	.word	0x66666666
 800107c:	400a6666 	.word	0x400a6666
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fb99999 	.word	0x3fb99999
 8001088:	20000618 	.word	0x20000618
 800108c:	20000614 	.word	0x20000614
 8001090:	200000d0 	.word	0x200000d0
 8001094:	20000608 	.word	0x20000608
 8001098:	20000028 	.word	0x20000028

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b092      	sub	sp, #72	@ 0x48
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	2230      	movs	r2, #48	@ 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fbcd 	bl	800484a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	2301      	movs	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c6:	2310      	movs	r3, #16
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80010d2:	230d      	movs	r3, #13
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80010d6:	23c3      	movs	r3, #195	@ 0xc3
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010de:	2305      	movs	r3, #5
 80010e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 faee 	bl	80036c8 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80010f2:	f000 f9d9 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001102:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2103      	movs	r1, #3
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fd2c 	bl	8003b70 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800111e:	f000 f9c3 	bl	80014a8 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3748      	adds	r7, #72	@ 0x48
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001140:	4a31      	ldr	r2, [pc, #196]	@ (8001208 <MX_ADC1_Init+0xdc>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_ADC1_Init+0xd8>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001150:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001152:	2201      	movs	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001158:	2201      	movs	r2, #1
 800115a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_ADC1_Init+0xd8>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_ADC1_Init+0xd8>)
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <MX_ADC1_Init+0xe0>)
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001178:	2203      	movs	r2, #3
 800117a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC1_Init+0xd8>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_ADC1_Init+0xd8>)
 8001186:	2201      	movs	r2, #1
 8001188:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118a:	481e      	ldr	r0, [pc, #120]	@ (8001204 <MX_ADC1_Init+0xd8>)
 800118c:	f000 fc32 	bl	80019f4 <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 f987 	bl	80014a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800119a:	2303      	movs	r3, #3
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4816      	ldr	r0, [pc, #88]	@ (8001204 <MX_ADC1_Init+0xd8>)
 80011ac:	f000 feca 	bl	8001f44 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011b6:	f000 f977 	bl	80014a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011ba:	2305      	movs	r3, #5
 80011bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_ADC1_Init+0xd8>)
 80011cc:	f000 feba 	bl	8001f44 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011d6:	f000 f967 	bl	80014a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011da:	2306      	movs	r3, #6
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011de:	2303      	movs	r3, #3
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80011e2:	2303      	movs	r3, #3
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_ADC1_Init+0xd8>)
 80011ec:	f000 feaa 	bl	8001f44 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80011f6:	f000 f957 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000028 	.word	0x20000028
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <MX_DAC_Init+0x4c>)
 8001220:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <MX_DAC_Init+0x50>)
 8001222:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_DAC_Init+0x4c>)
 8001226:	f001 fa4c 	bl	80026c2 <HAL_DAC_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001230:	f000 f93a 	bl	80014a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_DAC_Init+0x4c>)
 8001244:	f001 fb3d 	bl	80028c2 <HAL_DAC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800124e:	f000 f92b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000d0 	.word	0x200000d0
 8001260:	40007400 	.word	0x40007400

08001264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_USART3_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 8001270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_USART3_UART_Init+0x4c>)
 800129c:	f002 feae 	bl	8003ffc <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f8ff 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000e4 	.word	0x200000e4
 80012b4:	40004800 	.word	0x40004800

080012b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012d8:	2202      	movs	r2, #2
 80012da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012de:	2201      	movs	r2, #1
 80012e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80012f6:	f002 f8d7 	bl	80034a8 <HAL_PCD_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 f8d2 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000012c 	.word	0x2000012c

0800130c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_DMA_Init+0x3c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <MX_DMA_Init+0x3c>)
 800131c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_DMA_Init+0x3c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2038      	movs	r0, #56	@ 0x38
 8001334:	f001 f98f 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001338:	2038      	movs	r0, #56	@ 0x38
 800133a:	f001 f9a8 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	4b4c      	ldr	r3, [pc, #304]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a4b      	ldr	r2, [pc, #300]	@ (8001498 <MX_GPIO_Init+0x14c>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b49      	ldr	r3, [pc, #292]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	4b45      	ldr	r3, [pc, #276]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a44      	ldr	r2, [pc, #272]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a36      	ldr	r2, [pc, #216]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b30      	ldr	r3, [pc, #192]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <MX_GPIO_Init+0x14c>)
 80013f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <MX_GPIO_Init+0x14c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001410:	4822      	ldr	r0, [pc, #136]	@ (800149c <MX_GPIO_Init+0x150>)
 8001412:	f002 f831 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2140      	movs	r1, #64	@ 0x40
 800141a:	4821      	ldr	r0, [pc, #132]	@ (80014a0 <MX_GPIO_Init+0x154>)
 800141c:	f002 f82c 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001426:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800142a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <MX_GPIO_Init+0x158>)
 8001438:	f001 fe80 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800143c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_GPIO_Init+0x150>)
 8001456:	f001 fe71 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800145a:	2340      	movs	r3, #64	@ 0x40
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <MX_GPIO_Init+0x154>)
 8001472:	f001 fe63 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_GPIO_Init+0x154>)
 800148a:	f001 fe57 	bl	800313c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	@ 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40020800 	.word	0x40020800

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <Error_Handler+0x8>

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <HAL_MspInit+0x48>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_MspInit+0x48>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_MspInit+0x48>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <HAL_MspInit+0x48>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <HAL_MspInit+0x48>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a33      	ldr	r2, [pc, #204]	@ (80015ec <HAL_ADC_MspInit+0xec>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d15f      	bne.n	80015e2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6453      	str	r3, [r2, #68]	@ 0x44
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a2a      	ldr	r2, [pc, #168]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_ADC_MspInit+0xf0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800155a:	2368      	movs	r3, #104	@ 0x68
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155e:	2303      	movs	r3, #3
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4821      	ldr	r0, [pc, #132]	@ (80015f4 <HAL_ADC_MspInit+0xf4>)
 800156e:	f001 fde5 	bl	800313c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001572:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001574:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <HAL_ADC_MspInit+0xfc>)
 8001576:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001578:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001584:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 800158c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001590:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 8001594:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001598:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 800159c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015b6:	4810      	ldr	r0, [pc, #64]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015b8:	f001 f9e4 	bl	8002984 <HAL_DMA_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015c2:	f7ff ff71 	bl	80014a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80015cc:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <HAL_ADC_MspInit+0xf8>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2012      	movs	r0, #18
 80015d8:	f001 f83d 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015dc:	2012      	movs	r0, #18
 80015de:	f001 f856 	bl	800268e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40012000 	.word	0x40012000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	20000070 	.word	0x20000070
 80015fc:	40026410 	.word	0x40026410

08001600 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <HAL_DAC_MspInit+0x8c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12f      	bne.n	8001682 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 800162c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001630:	6413      	str	r3, [r2, #64]	@ 0x40
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <HAL_DAC_MspInit+0x90>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800165a:	2310      	movs	r3, #16
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <HAL_DAC_MspInit+0x94>)
 800166e:	f001 fd65 	bl	800313c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2036      	movs	r0, #54	@ 0x36
 8001678:	f000 ffed 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167c:	2036      	movs	r0, #54	@ 0x36
 800167e:	f001 f806 	bl	800268e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40007400 	.word	0x40007400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	@ (800171c <HAL_UART_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12c      	bne.n	8001714 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <HAL_UART_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001704:	2307      	movs	r3, #7
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <HAL_UART_MspInit+0x8c>)
 8001710:	f001 fd14 	bl	800313c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004800 	.word	0x40004800
 8001720:	40023800 	.word	0x40023800
 8001724:	40020c00 	.word	0x40020c00

08001728 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001748:	d13f      	bne.n	80017ca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a20      	ldr	r2, [pc, #128]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001766:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001778:	230a      	movs	r3, #10
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4815      	ldr	r0, [pc, #84]	@ (80017d8 <HAL_PCD_MspInit+0xb0>)
 8001784:	f001 fcda 	bl	800313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <HAL_PCD_MspInit+0xb0>)
 800179e:	f001 fccd 	bl	800313c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_PCD_MspInit+0xac>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	@ 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f8a2 	bl	8001974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <ADC_IRQHandler+0x10>)
 800183a:	f000 f91e 	bl	8001a7a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000028 	.word	0x20000028

08001848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <TIM6_DAC_IRQHandler+0x10>)
 800184e:	f000 ffb0 	bl	80027b2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000d0 	.word	0x200000d0

0800185c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <DMA2_Stream0_IRQHandler+0x10>)
 8001862:	f001 fa05 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000070 	.word	0x20000070

08001870 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001880:	f7ff fff6 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f002 ffd7 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fb7b 	bl	8000fa8 <main>
  bx  lr
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018c0:	080048ec 	.word	0x080048ec
  ldr r2, =_sbss
 80018c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018c8:	20000620 	.word	0x20000620

080018cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <CAN1_RX0_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <HAL_Init+0x40>)
 80018da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <HAL_Init+0x40>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <HAL_Init+0x40>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fea1 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f808 	bl	8001914 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fdd6 	bl	80014b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_InitTick+0x54>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_InitTick+0x58>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192a:	fbb3 f3f1 	udiv	r3, r3, r1
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 feb9 	bl	80026aa <HAL_SYSTICK_Config>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e00e      	b.n	8001960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b0f      	cmp	r3, #15
 8001946:	d80a      	bhi.n	800195e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001948:	2200      	movs	r2, #0
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	f04f 30ff 	mov.w	r0, #4294967295
 8001950:	f000 fe81 	bl	8002656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_InitTick+0x5c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000000 	.word	0x20000000
 800196c:	20000008 	.word	0x20000008
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_IncTick+0x1c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_IncTick+0x20>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <HAL_IncTick+0x20>)
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000008 	.word	0x20000008
 8001994:	2000061c 	.word	0x2000061c

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <HAL_GetTick+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	2000061c 	.word	0x2000061c

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fff0 	bl	8001998 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffe0 	bl	8001998 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e033      	b.n	8001a72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fd74 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a3a:	f023 0302 	bic.w	r3, r3, #2
 8001a3e:	f043 0202 	orr.w	r2, r3, #2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fb9c 	bl	8002184 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f023 0303 	bic.w	r3, r3, #3
 8001a5a:	f043 0201 	orr.w	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a62:	e001      	b.n	8001a68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d049      	beq.n	8001b44 <HAL_ADC_IRQHandler+0xca>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d046      	beq.n	8001b44 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d12b      	bne.n	8001b34 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d127      	bne.n	8001b34 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d119      	bne.n	8001b34 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0220 	bic.w	r2, r2, #32
 8001b0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f9e0 	bl	8001efa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f06f 0212 	mvn.w	r2, #18
 8001b42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d057      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x190>
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d054      	beq.n	8001c0a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d139      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b8c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12b      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d124      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d11d      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d119      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fc4a 	bl	8002494 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 020c 	mvn.w	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c18:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d017      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x1d6>
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d014      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10d      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f96c 	bl	8001f1e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f06f 0201 	mvn.w	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c5e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d015      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x218>
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0220 	mvn.w	r2, #32
 8001c80:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f954 	bl	8001f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0220 	mvn.w	r2, #32
 8001c90:	601a      	str	r2, [r3, #0]
  }
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Start_DMA+0x1e>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e0bc      	b.n	8001e34 <HAL_ADC_Start_DMA+0x198>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d018      	beq.n	8001d02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <HAL_ADC_Start_DMA+0x1a0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	@ (8001e40 <HAL_ADC_Start_DMA+0x1a4>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9a      	lsrs	r2, r3, #18
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 8084 	bne.w	8001e1a <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d50:	d106      	bne.n	8001d60 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f023 0206 	bic.w	r2, r3, #6
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d5e:	e002      	b.n	8001d66 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d72:	4a34      	ldr	r2, [pc, #208]	@ (8001e44 <HAL_ADC_Start_DMA+0x1a8>)
 8001d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d7a:	4a33      	ldr	r2, [pc, #204]	@ (8001e48 <HAL_ADC_Start_DMA+0x1ac>)
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d82:	4a32      	ldr	r2, [pc, #200]	@ (8001e4c <HAL_ADC_Start_DMA+0x1b0>)
 8001d84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001d9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	334c      	adds	r3, #76	@ 0x4c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f000 fe8e 	bl	8002ae0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <HAL_ADC_Start_DMA+0x1b4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d129      	bne.n	8001e32 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	e020      	b.n	8001e32 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_ADC_Start_DMA+0x1b8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d11b      	bne.n	8001e32 <HAL_ADC_Start_DMA+0x196>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d114      	bne.n	8001e32 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e00b      	b.n	8001e32 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	08002391 	.word	0x08002391
 8001e48:	0800244b 	.word	0x0800244b
 8001e4c:	08002467 	.word	0x08002467
 8001e50:	40012300 	.word	0x40012300
 8001e54:	40012000 	.word	0x40012000

08001e58 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Stop_DMA+0x1a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e03f      	b.n	8001ef2 <HAL_ADC_Stop_DMA+0x9a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d127      	bne.n	8001ee8 <HAL_ADC_Stop_DMA+0x90>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d118      	bne.n	8001ee8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fe68 	bl	8002b90 <HAL_DMA_Abort>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]
      
      /* Disable ADC overrun interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001ed2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e103      	b.n	8002168 <HAL_ADC_ConfigChannel+0x224>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e022      	b.n	8002002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b05      	subs	r3, #5
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
 8002052:	e04c      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d824      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	@ 0x23
 800206e:	221f      	movs	r2, #31
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	@ 0x23
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a4:	e023      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b41      	subs	r3, #65	@ 0x41
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	@ 0x41
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a20      	ldr	r2, [pc, #128]	@ (8002174 <HAL_ADC_ConfigChannel+0x230>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d109      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b12      	cmp	r3, #18
 80020fe:	d105      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HAL_ADC_ConfigChannel+0x234>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_ADC_ConfigChannel+0x234>)
 8002106:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800210a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a18      	ldr	r2, [pc, #96]	@ (8002174 <HAL_ADC_ConfigChannel+0x230>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d123      	bne.n	800215e <HAL_ADC_ConfigChannel+0x21a>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d003      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x1e2>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b11      	cmp	r3, #17
 8002124:	d11b      	bne.n	800215e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_ADC_ConfigChannel+0x234>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <HAL_ADC_ConfigChannel+0x234>)
 800212c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002130:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d111      	bne.n	800215e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_ADC_ConfigChannel+0x238>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_ADC_ConfigChannel+0x23c>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	0c9a      	lsrs	r2, r3, #18
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002150:	e002      	b.n	8002158 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3b01      	subs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40012000 	.word	0x40012000
 8002178:	40012300 	.word	0x40012300
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800218c:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <ADC_Init+0x204>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <ADC_Init+0x204>)
 8002192:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002196:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002198:	4b7b      	ldr	r3, [pc, #492]	@ (8002388 <ADC_Init+0x204>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4979      	ldr	r1, [pc, #484]	@ (8002388 <ADC_Init+0x204>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	021a      	lsls	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	4a5e      	ldr	r2, [pc, #376]	@ (800238c <ADC_Init+0x208>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e00f      	b.n	800227e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800226c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e1b      	ldrb	r3, [r3, #24]
 8002298:	005a      	lsls	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d027      	beq.n	80022fc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	3b01      	subs	r3, #1
 80022d2:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80022d6:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	fa03 f102 	lsl.w	r1, r3, r2
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e007      	b.n	800230c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	3b01      	subs	r3, #1
 8002328:	051a      	lsls	r2, r3, #20
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800234e:	025a      	lsls	r2, r3, #9
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	029a      	lsls	r2, r3, #10
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40012300 	.word	0x40012300
 800238c:	0f000001 	.word	0x0f000001

08002390 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d13c      	bne.n	8002424 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d12b      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d127      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d119      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0220 	bic.w	r2, r2, #32
 80023f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fd6c 	bl	8001efa <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002422:	e00e      	b.n	8002442 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fd7d 	bl	8001f30 <HAL_ADC_ErrorCallback>
}
 8002436:	e004      	b.n	8002442 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fd57 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fd52 	bl	8001f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	@ (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4906      	ldr	r1, [pc, #24]	@ (8002540 <__NVIC_EnableIRQ+0x34>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100

08002544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	@ (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	@ 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
         );
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	@ 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f7ff ff90 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff2d 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff42 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff90 	bl	8002598 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5f 	bl	8002544 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff35 	bl	800250c <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e014      	b.n	80026fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe ff8b 	bl	8001600 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e046      	b.n	80027a8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	795b      	ldrb	r3, [r3, #5]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_DAC_Start+0x20>
 8002722:	2302      	movs	r3, #2
 8002724:	e040      	b.n	80027a8 <HAL_DAC_Start+0xa2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10f      	bne.n	8002770 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800275a:	2b3c      	cmp	r3, #60	@ 0x3c
 800275c:	d11d      	bne.n	800279a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e014      	b.n	800279a <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	213c      	movs	r1, #60	@ 0x3c
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	429a      	cmp	r2, r3
 8002788:	d107      	bne.n	800279a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0202 	orr.w	r2, r2, #2
 8002798:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01d      	beq.n	8002810 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002808:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f850 	bl	80028b0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01d      	beq.n	8002856 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d018      	beq.n	8002856 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800283e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800284e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f88e 	bl	8002972 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e015      	b.n	80028a6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3308      	adds	r3, #8
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e004      	b.n	800289c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	3314      	adds	r3, #20
 800289a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b089      	sub	sp, #36	@ 0x24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_DAC_ConfigChannel+0x1c>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e042      	b.n	8002968 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	795b      	ldrb	r3, [r3, #5]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DAC_ConfigChannel+0x2c>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e03c      	b.n	8002968 <HAL_DAC_ConfigChannel+0xa6>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	22c0      	movs	r2, #192	@ 0xc0
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43da      	mvns	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002966:	7ffb      	ldrb	r3, [r7, #31]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3724      	adds	r7, #36	@ 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff f802 	bl	8001998 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e099      	b.n	8002ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c0:	e00f      	b.n	80029e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c2:	f7fe ffe9 	bl	8001998 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d908      	bls.n	80029e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e078      	b.n	8002ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e8      	bne.n	80029c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <HAL_DMA_Init+0x158>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	4313      	orrs	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0307 	bic.w	r3, r3, #7
 8002a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d117      	bne.n	8002aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fadd 	bl	8003048 <DMA_CheckFifoParam>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa96 	bl	8002fe0 <DMA_CalcBaseAndBitshift>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	223f      	movs	r2, #63	@ 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	f010803f 	.word	0xf010803f

08002ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Start_IT+0x26>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e040      	b.n	8002b88 <HAL_DMA_Start_IT+0xa8>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12f      	bne.n	8002b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa28 	bl	8002f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b38:	223f      	movs	r2, #63	@ 0x3f
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0216 	orr.w	r2, r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0208 	orr.w	r2, r2, #8
 8002b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e005      	b.n	8002b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b9e:	f7fe fefb 	bl	8001998 <HAL_GetTick>
 8002ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d008      	beq.n	8002bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e052      	b.n	8002c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0216 	bic.w	r2, r2, #22
 8002bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_DMA_Abort+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0208 	bic.w	r2, r2, #8
 8002c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c12:	e013      	b.n	8002c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c14:	f7fe fec0 	bl	8001998 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d90c      	bls.n	8002c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e015      	b.n	8002c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e4      	bne.n	8002c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	223f      	movs	r2, #63	@ 0x3f
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c7c:	4b8e      	ldr	r3, [pc, #568]	@ (8002eb8 <HAL_DMA_IRQHandler+0x248>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a8e      	ldr	r2, [pc, #568]	@ (8002ebc <HAL_DMA_IRQHandler+0x24c>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	2208      	movs	r2, #8
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	2204      	movs	r2, #4
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d34:	2204      	movs	r2, #4
 8002d36:	409a      	lsls	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f043 0204 	orr.w	r2, r3, #4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d043      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d03c      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d018      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d024      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	e01f      	b.n	8002de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e016      	b.n	8002de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0208 	bic.w	r2, r2, #8
 8002dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	2220      	movs	r2, #32
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 808f 	beq.w	8002f10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8087 	beq.w	8002f10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	2220      	movs	r2, #32
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	d136      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0216 	bic.w	r2, r2, #22
 8002e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_DMA_IRQHandler+0x1da>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	223f      	movs	r2, #63	@ 0x3f
 8002e60:	409a      	lsls	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d07e      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
        }
        return;
 8002e86:	e079      	b.n	8002f7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01d      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d031      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
 8002eb4:	e02c      	b.n	8002f10 <HAL_DMA_IRQHandler+0x2a0>
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d023      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	e01e      	b.n	8002f10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10f      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0210 	bic.w	r2, r2, #16
 8002eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d032      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2205      	movs	r2, #5
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d307      	bcc.n	8002f58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f2      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x2cc>
 8002f56:	e000      	b.n	8002f5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	e000      	b.n	8002f7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f7c:	bf00      	nop
    }
  }
}
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d108      	bne.n	8002fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fc2:	e007      	b.n	8002fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3b10      	subs	r3, #16
 8002ff0:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <DMA_CalcBaseAndBitshift+0x60>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ffa:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <DMA_CalcBaseAndBitshift+0x64>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d909      	bls.n	8003022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	1d1a      	adds	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003020:	e007      	b.n	8003032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	aaaaaaab 	.word	0xaaaaaaab
 8003044:	080048d4 	.word	0x080048d4

08003048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11f      	bne.n	80030a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d856      	bhi.n	8003116 <DMA_CheckFifoParam+0xce>
 8003068:	a201      	add	r2, pc, #4	@ (adr r2, 8003070 <DMA_CheckFifoParam+0x28>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	08003081 	.word	0x08003081
 8003074:	08003093 	.word	0x08003093
 8003078:	08003081 	.word	0x08003081
 800307c:	08003117 	.word	0x08003117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d046      	beq.n	800311a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e043      	b.n	800311a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800309a:	d140      	bne.n	800311e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e03d      	b.n	800311e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030aa:	d121      	bne.n	80030f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d837      	bhi.n	8003122 <DMA_CheckFifoParam+0xda>
 80030b2:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <DMA_CheckFifoParam+0x70>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030cf 	.word	0x080030cf
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	080030e1 	.word	0x080030e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e030      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d025      	beq.n	8003126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030de:	e022      	b.n	8003126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030e8:	d11f      	bne.n	800312a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ee:	e01c      	b.n	800312a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d903      	bls.n	80030fe <DMA_CheckFifoParam+0xb6>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d003      	beq.n	8003104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030fc:	e018      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      break;
 8003102:	e015      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e00b      	b.n	800312e <DMA_CheckFifoParam+0xe6>
      break;
 8003116:	bf00      	nop
 8003118:	e00a      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e008      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e006      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
 8003124:	e004      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;   
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
    }
  } 
  
  return status; 
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	e16f      	b.n	800342c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8161 	beq.w	8003426 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d005      	beq.n	800317c <HAL_GPIO_Init+0x40>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d130      	bne.n	80031de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b2:	2201      	movs	r2, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 0201 	and.w	r2, r3, #1
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d017      	beq.n	800321a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d123      	bne.n	800326e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0203 	and.w	r2, r3, #3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80bb 	beq.w	8003426 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	4b64      	ldr	r3, [pc, #400]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b8:	4a63      	ldr	r2, [pc, #396]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032be:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c0:	4b61      	ldr	r3, [pc, #388]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032cc:	4a5f      	ldr	r2, [pc, #380]	@ (800344c <HAL_GPIO_Init+0x310>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	3302      	adds	r3, #2
 80032d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	220f      	movs	r2, #15
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_GPIO_Init+0x314>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d031      	beq.n	800335c <HAL_GPIO_Init+0x220>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a56      	ldr	r2, [pc, #344]	@ (8003454 <HAL_GPIO_Init+0x318>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02b      	beq.n	8003358 <HAL_GPIO_Init+0x21c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a55      	ldr	r2, [pc, #340]	@ (8003458 <HAL_GPIO_Init+0x31c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d025      	beq.n	8003354 <HAL_GPIO_Init+0x218>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a54      	ldr	r2, [pc, #336]	@ (800345c <HAL_GPIO_Init+0x320>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d01f      	beq.n	8003350 <HAL_GPIO_Init+0x214>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a53      	ldr	r2, [pc, #332]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d019      	beq.n	800334c <HAL_GPIO_Init+0x210>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a52      	ldr	r2, [pc, #328]	@ (8003464 <HAL_GPIO_Init+0x328>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_GPIO_Init+0x20c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a51      	ldr	r2, [pc, #324]	@ (8003468 <HAL_GPIO_Init+0x32c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00d      	beq.n	8003344 <HAL_GPIO_Init+0x208>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a50      	ldr	r2, [pc, #320]	@ (800346c <HAL_GPIO_Init+0x330>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <HAL_GPIO_Init+0x204>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <HAL_GPIO_Init+0x334>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_GPIO_Init+0x200>
 8003338:	2308      	movs	r3, #8
 800333a:	e010      	b.n	800335e <HAL_GPIO_Init+0x222>
 800333c:	2309      	movs	r3, #9
 800333e:	e00e      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003340:	2307      	movs	r3, #7
 8003342:	e00c      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003344:	2306      	movs	r3, #6
 8003346:	e00a      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003348:	2305      	movs	r3, #5
 800334a:	e008      	b.n	800335e <HAL_GPIO_Init+0x222>
 800334c:	2304      	movs	r3, #4
 800334e:	e006      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003350:	2303      	movs	r3, #3
 8003352:	e004      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003354:	2302      	movs	r3, #2
 8003356:	e002      	b.n	800335e <HAL_GPIO_Init+0x222>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_GPIO_Init+0x222>
 800335c:	2300      	movs	r3, #0
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	f002 0203 	and.w	r2, r2, #3
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	4093      	lsls	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003370:	4936      	ldr	r1, [pc, #216]	@ (800344c <HAL_GPIO_Init+0x310>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337e:	4b3d      	ldr	r3, [pc, #244]	@ (8003474 <HAL_GPIO_Init+0x338>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033a2:	4a34      	ldr	r2, [pc, #208]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a8:	4b32      	ldr	r3, [pc, #200]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033cc:	4a29      	ldr	r2, [pc, #164]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033d2:	4b28      	ldr	r3, [pc, #160]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <HAL_GPIO_Init+0x338>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003420:	4a14      	ldr	r2, [pc, #80]	@ (8003474 <HAL_GPIO_Init+0x338>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3301      	adds	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f47f ae88 	bne.w	800314c <HAL_GPIO_Init+0x10>
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40021400 	.word	0x40021400
 8003468:	40021800 	.word	0x40021800
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40022000 	.word	0x40022000
 8003474:	40013c00 	.word	0x40013c00

08003478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
 8003484:	4613      	mov	r3, r2
 8003486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003488:	787b      	ldrb	r3, [r7, #1]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003494:	e003      	b.n	800349e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	041a      	lsls	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	619a      	str	r2, [r3, #24]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e101      	b.n	80036be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fe f927 	bl	8001728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 ff14 	bl	8004322 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7c1a      	ldrb	r2, [r3, #16]
 8003502:	f88d 2000 	strb.w	r2, [sp]
 8003506:	3304      	adds	r3, #4
 8003508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350a:	f000 feb1 	bl	8004270 <USB_CoreInit>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0ce      	b.n	80036be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 ff0b 	bl	8004342 <USB_SetCurrentMode>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0bf      	b.n	80036be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
 8003542:	e04a      	b.n	80035da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3315      	adds	r3, #21
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3314      	adds	r3, #20
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	b298      	uxth	r0, r3
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	332e      	adds	r3, #46	@ 0x2e
 8003580:	4602      	mov	r2, r0
 8003582:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3318      	adds	r3, #24
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	331c      	adds	r3, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3320      	adds	r3, #32
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3324      	adds	r3, #36	@ 0x24
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	3301      	adds	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d3af      	bcc.n	8003544 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
 80035e8:	e044      	b.n	8003674 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	3301      	adds	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	791b      	ldrb	r3, [r3, #4]
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	429a      	cmp	r2, r3
 800367c:	d3b5      	bcc.n	80035ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7c1a      	ldrb	r2, [r3, #16]
 8003686:	f88d 2000 	strb.w	r2, [sp]
 800368a:	3304      	adds	r3, #4
 800368c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800368e:	f000 fea5 	bl	80043dc <USB_DevInit>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e00c      	b.n	80036be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 f86a 	bl	8004790 <USB_DevDisconnect>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e23b      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d050      	beq.n	8003788 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e6:	4b9e      	ldr	r3, [pc, #632]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d00c      	beq.n	800370c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b9b      	ldr	r3, [pc, #620]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d112      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fe:	4b98      	ldr	r3, [pc, #608]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b94      	ldr	r3, [pc, #592]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d036      	beq.n	8003786 <HAL_RCC_OscConfig+0xbe>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d132      	bne.n	8003786 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e216      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	4b8e      	ldr	r3, [pc, #568]	@ (8003964 <HAL_RCC_OscConfig+0x29c>)
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe f92f 	bl	8001998 <HAL_GetTick>
 800373a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373e:	f7fe f92b 	bl	8001998 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	@ 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e200      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003750:	4b83      	ldr	r3, [pc, #524]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x76>
 800375c:	e014      	b.n	8003788 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe f91b 	bl	8001998 <HAL_GetTick>
 8003762:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003766:	f7fe f917 	bl	8001998 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	@ 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1ec      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003778:	4b79      	ldr	r3, [pc, #484]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x9e>
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003786:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d077      	beq.n	8003884 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003794:	4b72      	ldr	r3, [pc, #456]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d126      	bne.n	80037fa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d120      	bne.n	80037fa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b8:	4b69      	ldr	r3, [pc, #420]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x108>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e1c0      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	21f8      	movs	r1, #248	@ 0xf8
 80037de:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	69b9      	ldr	r1, [r7, #24]
 80037e2:	fa91 f1a1 	rbit	r1, r1
 80037e6:	6179      	str	r1, [r7, #20]
  return result;
 80037e8:	6979      	ldr	r1, [r7, #20]
 80037ea:	fab1 f181 	clz	r1, r1
 80037ee:	b2c9      	uxtb	r1, r1
 80037f0:	408b      	lsls	r3, r1
 80037f2:	495b      	ldr	r1, [pc, #364]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f8:	e044      	b.n	8003884 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02a      	beq.n	8003858 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003802:	4b59      	ldr	r3, [pc, #356]	@ (8003968 <HAL_RCC_OscConfig+0x2a0>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe f8c6 	bl	8001998 <HAL_GetTick>
 800380c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003810:	f7fe f8c2 	bl	8001998 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e197      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003822:	4b4f      	ldr	r3, [pc, #316]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	21f8      	movs	r1, #248	@ 0xf8
 800383c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	fa91 f1a1 	rbit	r1, r1
 8003844:	60f9      	str	r1, [r7, #12]
  return result;
 8003846:	68f9      	ldr	r1, [r7, #12]
 8003848:	fab1 f181 	clz	r1, r1
 800384c:	b2c9      	uxtb	r1, r1
 800384e:	408b      	lsls	r3, r1
 8003850:	4943      	ldr	r1, [pc, #268]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
 8003856:	e015      	b.n	8003884 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003858:	4b43      	ldr	r3, [pc, #268]	@ (8003968 <HAL_RCC_OscConfig+0x2a0>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fe f89b 	bl	8001998 <HAL_GetTick>
 8003862:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fe f897 	bl	8001998 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e16c      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003878:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d030      	beq.n	80038f2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d016      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003898:	4b34      	ldr	r3, [pc, #208]	@ (800396c <HAL_RCC_OscConfig+0x2a4>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe f87b 	bl	8001998 <HAL_GetTick>
 80038a2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe f877 	bl	8001998 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e14c      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b8:	4b29      	ldr	r3, [pc, #164]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1de>
 80038c4:	e015      	b.n	80038f2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c6:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_RCC_OscConfig+0x2a4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038cc:	f7fe f864 	bl	8001998 <HAL_GetTick>
 80038d0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe f860 	bl	8001998 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e135      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8087 	beq.w	8003a0e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d110      	bne.n	8003934 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	@ 0x40
 8003922:	4b0f      	ldr	r3, [pc, #60]	@ (8003960 <HAL_RCC_OscConfig+0x298>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003934:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <HAL_RCC_OscConfig+0x2a8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <HAL_RCC_OscConfig+0x2a8>)
 800393a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_OscConfig+0x2a8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d122      	bne.n	8003992 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_RCC_OscConfig+0x2a8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <HAL_RCC_OscConfig+0x2a8>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003958:	f7fe f81e 	bl	8001998 <HAL_GetTick>
 800395c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	e012      	b.n	8003986 <HAL_RCC_OscConfig+0x2be>
 8003960:	40023800 	.word	0x40023800
 8003964:	40023802 	.word	0x40023802
 8003968:	42470000 	.word	0x42470000
 800396c:	42470e80 	.word	0x42470e80
 8003970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe f810 	bl	8001998 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0e5      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b75      	ldr	r3, [pc, #468]	@ (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	4b72      	ldr	r3, [pc, #456]	@ (8003b60 <HAL_RCC_OscConfig+0x498>)
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fd fff8 	bl	8001998 <HAL_GetTick>
 80039a8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd fff4 	bl	8001998 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0c7      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	4b68      	ldr	r3, [pc, #416]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ee      	beq.n	80039ac <HAL_RCC_OscConfig+0x2e4>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d0:	f7fd ffe2 	bl	8001998 <HAL_GetTick>
 80039d4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fd ffde 	bl	8001998 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0b1      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ee      	bne.n	80039d8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b58      	ldr	r3, [pc, #352]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a57      	ldr	r2, [pc, #348]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 809c 	beq.w	8003b50 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a18:	4b52      	ldr	r3, [pc, #328]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d061      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d146      	bne.n	8003aba <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fd ffb1 	bl	8001998 <HAL_GetTick>
 8003a36:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fd ffad 	bl	8001998 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	@ 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e082      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	4b45      	ldr	r3, [pc, #276]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b42      	ldr	r3, [pc, #264]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <HAL_RCC_OscConfig+0x4a4>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	69d1      	ldr	r1, [r2, #28]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a12      	ldr	r2, [r2, #32]
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a6e:	0192      	lsls	r2, r2, #6
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a76:	0612      	lsls	r2, r2, #24
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0412      	lsls	r2, r2, #16
 8003a84:	430a      	orrs	r2, r1
 8003a86:	4937      	ldr	r1, [pc, #220]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b36      	ldr	r3, [pc, #216]	@ (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd ff81 	bl	8001998 <HAL_GetTick>
 8003a96:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fd ff7d 	bl	8001998 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	@ 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e052      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x3d2>
 8003ab8:	e04a      	b.n	8003b50 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	4b2b      	ldr	r3, [pc, #172]	@ (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd ff6a 	bl	8001998 <HAL_GetTick>
 8003ac4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd ff66 	bl	8001998 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	@ 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e03b      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x400>
 8003ae6:	e033      	b.n	8003b50 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e02e      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d121      	bne.n	8003b4c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d11a      	bne.n	8003b4c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b22:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	085b      	lsrs	r3, r3, #1
 8003b34:	3b01      	subs	r3, #1
 8003b36:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	@ 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	40023870 	.word	0x40023870
 8003b64:	40023800 	.word	0x40023800
 8003b68:	42470060 	.word	0x42470060
 8003b6c:	f0bc8000 	.word	0xf0bc8000

08003b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0d2      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b6b      	ldr	r3, [pc, #428]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d90c      	bls.n	8003bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b68      	ldr	r3, [pc, #416]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b66      	ldr	r3, [pc, #408]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0be      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a5b      	ldr	r2, [pc, #364]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003bdc:	4b56      	ldr	r3, [pc, #344]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a55      	ldr	r2, [pc, #340]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4950      	ldr	r1, [pc, #320]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d040      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d115      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e085      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b44      	ldr	r3, [pc, #272]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e079      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b40      	ldr	r3, [pc, #256]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e071      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4939      	ldr	r1, [pc, #228]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c58:	f7fd fe9e 	bl	8001998 <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fd fe9a 	bl	8001998 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e059      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b30      	ldr	r3, [pc, #192]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b2a      	ldr	r3, [pc, #168]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d20c      	bcs.n	8003cb0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e03c      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	491b      	ldr	r1, [pc, #108]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cda:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4913      	ldr	r1, [pc, #76]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003cee:	f000 f82b 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cfc:	22f0      	movs	r2, #240	@ 0xf0
 8003cfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	fa92 f2a2 	rbit	r2, r2
 8003d06:	60fa      	str	r2, [r7, #12]
  return result;
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	40d3      	lsrs	r3, r2
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_RCC_ClockConfig+0x1cc>)
 8003d14:	5cd3      	ldrb	r3, [r2, r3]
 8003d16:	fa21 f303 	lsr.w	r3, r1, r3
 8003d1a:	4a09      	ldr	r2, [pc, #36]	@ (8003d40 <HAL_RCC_ClockConfig+0x1d0>)
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d1e:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_RCC_ClockConfig+0x1d4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fdf6 	bl	8001914 <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	080048bc 	.word	0x080048bc
 8003d40:	20000000 	.word	0x20000000
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b094      	sub	sp, #80	@ 0x50
 8003d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d54:	2300      	movs	r3, #0
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	2300      	movs	r3, #0
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d60:	4b7c      	ldr	r3, [pc, #496]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d00d      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x40>
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	f200 80e7 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7a:	e0e1      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x210>)
 8003d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d80:	e0e1      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d82:	4b76      	ldr	r3, [pc, #472]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x214>)
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d86:	e0de      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d88:	4b72      	ldr	r3, [pc, #456]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d92:	4b70      	ldr	r3, [pc, #448]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d065      	beq.n	8003e6a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db2:	2300      	movs	r3, #0
 8003db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0159      	lsls	r1, r3, #5
 8003dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dcc:	0150      	lsls	r0, r2, #5
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	6139      	str	r1, [r7, #16]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dec:	4659      	mov	r1, fp
 8003dee:	018b      	lsls	r3, r1, #6
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df6:	4651      	mov	r1, sl
 8003df8:	018a      	lsls	r2, r1, #6
 8003dfa:	46d4      	mov	ip, sl
 8003dfc:	ebb2 080c 	subs.w	r8, r2, ip
 8003e00:	4659      	mov	r1, fp
 8003e02:	eb63 0901 	sbc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	462b      	mov	r3, r5
 8003e28:	eb49 0303 	adc.w	r3, r9, r3
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	024b      	lsls	r3, r1, #9
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4629      	mov	r1, r5
 8003e42:	4604      	mov	r4, r0
 8003e44:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003e48:	4601      	mov	r1, r0
 8003e4a:	024a      	lsls	r2, r1, #9
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	2200      	movs	r2, #0
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e5c:	f7fc ff2e 	bl	8000cbc <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e68:	e05c      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	2200      	movs	r2, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	4611      	mov	r1, r2
 8003e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	f04f 0000 	mov.w	r0, #0
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	0159      	lsls	r1, r3, #5
 8003e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e96:	0150      	lsls	r0, r2, #5
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	46c4      	mov	ip, r8
 8003e9e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	468c      	mov	ip, r1
 8003ea8:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	00eb      	lsls	r3, r5, #3
 8003ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed6:	00e2      	lsls	r2, r4, #3
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	4603      	mov	r3, r0
 8003ede:	18e3      	adds	r3, r4, r3
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	eb45 0303 	adc.w	r3, r5, r3
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4620      	mov	r0, r4
 8003efc:	4629      	mov	r1, r5
 8003efe:	4604      	mov	r4, r0
 8003f00:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003f04:	4601      	mov	r1, r0
 8003f06:	028a      	lsls	r2, r1, #10
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	61fa      	str	r2, [r7, #28]
 8003f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f18:	f7fc fed0 	bl	8000cbc <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003f34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f3e:	e002      	b.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x210>)
 8003f42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3750      	adds	r7, #80	@ 0x50
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b02      	ldr	r3, [pc, #8]	@ (8003f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	20000000 	.word	0x20000000

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003f7a:	f7ff fff1 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f7e:	4601      	mov	r1, r0
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003f88:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8003f8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	fa92 f2a2 	rbit	r2, r2
 8003f94:	603a      	str	r2, [r7, #0]
  return result;
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	fab2 f282 	clz	r2, r2
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	40d3      	lsrs	r3, r2
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	080048cc 	.word	0x080048cc

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003fbe:	f7ff ffcf 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fc2:	4601      	mov	r1, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003fcc:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003fd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	fa92 f2a2 	rbit	r2, r2
 8003fd8:	603a      	str	r2, [r7, #0]
  return result;
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	40d3      	lsrs	r3, r2
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003fe6:	5cd3      	ldrb	r3, [r2, r3]
 8003fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	080048cc 	.word	0x080048cc

08003ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e042      	b.n	8004094 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fb38 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	@ 0x24
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800403e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f82b 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80040dc:	f023 030c 	bic.w	r3, r3, #12
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	430b      	orrs	r3, r1
 80040e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a57      	ldr	r2, [pc, #348]	@ (8004264 <UART_SetConfig+0x1c8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <UART_SetConfig+0x78>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a56      	ldr	r2, [pc, #344]	@ (8004268 <UART_SetConfig+0x1cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7ff ff50 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	e002      	b.n	8004122 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff ff2a 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004120:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412a:	d14c      	bne.n	80041c6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009a      	lsls	r2, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	4a4a      	ldr	r2, [pc, #296]	@ (800426c <UART_SetConfig+0x1d0>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	0119      	lsls	r1, r3, #4
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	009a      	lsls	r2, r3, #2
 8004156:	441a      	add	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004162:	4b42      	ldr	r3, [pc, #264]	@ (800426c <UART_SetConfig+0x1d0>)
 8004164:	fba3 0302 	umull	r0, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2064      	movs	r0, #100	@ 0x64
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3332      	adds	r3, #50	@ 0x32
 8004176:	4a3d      	ldr	r2, [pc, #244]	@ (800426c <UART_SetConfig+0x1d0>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004184:	4419      	add	r1, r3
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fbb2 f2f3 	udiv	r2, r2, r3
 800419c:	4b33      	ldr	r3, [pc, #204]	@ (800426c <UART_SetConfig+0x1d0>)
 800419e:	fba3 0302 	umull	r0, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2064      	movs	r0, #100	@ 0x64
 80041a6:	fb00 f303 	mul.w	r3, r0, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	3332      	adds	r3, #50	@ 0x32
 80041b0:	4a2e      	ldr	r2, [pc, #184]	@ (800426c <UART_SetConfig+0x1d0>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 0207 	and.w	r2, r3, #7
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	440a      	add	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041c4:	e04a      	b.n	800425c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <UART_SetConfig+0x1d0>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	0119      	lsls	r1, r3, #4
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <UART_SetConfig+0x1d0>)
 80041fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2064      	movs	r0, #100	@ 0x64
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	@ 0x32
 8004210:	4a16      	ldr	r2, [pc, #88]	@ (800426c <UART_SetConfig+0x1d0>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800421c:	4419      	add	r1, r3
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f2f3 	udiv	r2, r2, r3
 8004234:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <UART_SetConfig+0x1d0>)
 8004236:	fba3 0302 	umull	r0, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2064      	movs	r0, #100	@ 0x64
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	@ 0x32
 8004248:	4a08      	ldr	r2, [pc, #32]	@ (800426c <UART_SetConfig+0x1d0>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 020f 	and.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	440a      	add	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40011000 	.word	0x40011000
 8004268:	40011400 	.word	0x40011400
 800426c:	51eb851f 	.word	0x51eb851f

08004270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004270:	b084      	sub	sp, #16
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	f107 001c 	add.w	r0, r7, #28
 800427e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004282:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004286:	2b01      	cmp	r3, #1
 8004288:	d123      	bne.n	80042d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800429e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa8f 	bl	80047ea <USB_CoreReset>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e010      	b.n	80042f4 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa83 	bl	80047ea <USB_CoreReset>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80042f4:	7fbb      	ldrb	r3, [r7, #30]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10b      	bne.n	8004312 <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f043 0206 	orr.w	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800431e:	b004      	add	sp, #16
 8004320:	4770      	bx	lr

08004322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d115      	bne.n	8004390 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004370:	200a      	movs	r0, #10
 8004372:	f7fd fb1b 	bl	80019ac <HAL_Delay>
      ms += 10U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	330a      	adds	r3, #10
 800437a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa27 	bl	80047d0 <USB_GetMode>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d01e      	beq.n	80043c6 <USB_SetCurrentMode+0x84>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2bc7      	cmp	r3, #199	@ 0xc7
 800438c:	d9f0      	bls.n	8004370 <USB_SetCurrentMode+0x2e>
 800438e:	e01a      	b.n	80043c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d115      	bne.n	80043c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043a2:	200a      	movs	r0, #10
 80043a4:	f7fd fb02 	bl	80019ac <HAL_Delay>
      ms += 10U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	330a      	adds	r3, #10
 80043ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa0e 	bl	80047d0 <USB_GetMode>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <USB_SetCurrentMode+0x84>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80043be:	d9f0      	bls.n	80043a2 <USB_SetCurrentMode+0x60>
 80043c0:	e001      	b.n	80043c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e005      	b.n	80043d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80043ca:	d101      	bne.n	80043d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043dc:	b084      	sub	sp, #16
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e009      	b.n	8004410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3340      	adds	r3, #64	@ 0x40
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3301      	adds	r3, #1
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b0e      	cmp	r3, #14
 8004414:	d9f2      	bls.n	80043fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004416:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11c      	bne.n	8004458 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004436:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	@ 0x38
 8004456:	e00b      	b.n	8004470 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800447c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10d      	bne.n	80044a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800448c:	2100      	movs	r1, #0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f966 	bl	8004760 <USB_SetDevSpeed>
 8004494:	e008      	b.n	80044a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004496:	2101      	movs	r1, #1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f961 	bl	8004760 <USB_SetDevSpeed>
 800449e:	e003      	b.n	80044a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044a0:	2103      	movs	r1, #3
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f95c 	bl	8004760 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044a8:	2110      	movs	r1, #16
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8fa 	bl	80046a4 <USB_FlushTxFifo>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f923 	bl	8004706 <USB_FlushRxFifo>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d0:	461a      	mov	r2, r3
 80044d2:	2300      	movs	r3, #0
 80044d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e8:	461a      	mov	r2, r3
 80044ea:	2300      	movs	r3, #0
 80044ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e043      	b.n	800457c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800450a:	d118      	bne.n	800453e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451e:	461a      	mov	r2, r3
 8004520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e013      	b.n	8004550 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004534:	461a      	mov	r2, r3
 8004536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e008      	b.n	8004550 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454a:	461a      	mov	r2, r3
 800454c:	2300      	movs	r3, #0
 800454e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3301      	adds	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004580:	461a      	mov	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4293      	cmp	r3, r2
 8004586:	d3b5      	bcc.n	80044f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	e043      	b.n	8004616 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a4:	d118      	bne.n	80045d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e013      	b.n	80045ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	461a      	mov	r2, r3
 80045d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e008      	b.n	80045ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f6:	461a      	mov	r2, r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004608:	461a      	mov	r2, r3
 800460a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800460e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3301      	adds	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800461a:	461a      	mov	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4293      	cmp	r3, r2
 8004620:	d3b5      	bcc.n	800458e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004634:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004642:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f043 0210 	orr.w	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <USB_DevInit+0x2c4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f043 0208 	orr.w	r2, r3, #8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800467c:	2b01      	cmp	r3, #1
 800467e:	d107      	bne.n	8004690 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004690:	7dfb      	ldrb	r3, [r7, #23]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800469c:	b004      	add	sp, #16
 800469e:	4770      	bx	lr
 80046a0:	803c3800 	.word	0x803c3800

080046a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046be:	d901      	bls.n	80046c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e01b      	b.n	80046fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	daf2      	bge.n	80046b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	019b      	lsls	r3, r3, #6
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046e8:	d901      	bls.n	80046ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e006      	b.n	80046fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d0f0      	beq.n	80046dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3301      	adds	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471e:	d901      	bls.n	8004724 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e018      	b.n	8004756 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	daf2      	bge.n	8004712 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2210      	movs	r2, #16
 8004734:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004742:	d901      	bls.n	8004748 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d0f0      	beq.n	8004736 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr

080047d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0301 	and.w	r3, r3, #1
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004802:	d901      	bls.n	8004808 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e01b      	b.n	8004840 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	daf2      	bge.n	80047f6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800482c:	d901      	bls.n	8004832 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e006      	b.n	8004840 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b01      	cmp	r3, #1
 800483c:	d0f0      	beq.n	8004820 <USB_CoreReset+0x36>

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <memset>:
 800484a:	4603      	mov	r3, r0
 800484c:	4402      	add	r2, r0
 800484e:	4293      	cmp	r3, r2
 8004850:	d100      	bne.n	8004854 <memset+0xa>
 8004852:	4770      	bx	lr
 8004854:	f803 1b01 	strb.w	r1, [r3], #1
 8004858:	e7f9      	b.n	800484e <memset+0x4>
	...

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4d0c      	ldr	r5, [pc, #48]	@ (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	@ (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f000 f81a 	bl	80048a4 <_init>
 8004870:	2600      	movs	r6, #0
 8004872:	4d0a      	ldr	r5, [pc, #40]	@ (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	@ (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080048e4 	.word	0x080048e4
 8004898:	080048e4 	.word	0x080048e4
 800489c:	080048e4 	.word	0x080048e4
 80048a0:	080048e8 	.word	0x080048e8

080048a4 <_init>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr

080048b0 <_fini>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr
